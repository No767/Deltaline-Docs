{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deltaline Documentation Introduction Welcome to the Deltaline Documentation. This serves as the offical documentation for Deltaline, and is available on GitHub. The docs is spilt into these pages here Contributing Contributing to the Docs Contributing to Deltaline How It Works Django Framework Structure Layout Issues with the Digital Portfolio Issues with the Digital Portfolio Terms and Conditions Art Assets Licensing About About Project Deltaline Art Assets","title":"Home"},{"location":"#deltaline-documentation","text":"","title":"Deltaline Documentation"},{"location":"#introduction","text":"Welcome to the Deltaline Documentation. This serves as the offical documentation for Deltaline, and is available on GitHub. The docs is spilt into these pages here","title":"Introduction"},{"location":"#contributing","text":"Contributing to the Docs Contributing to Deltaline","title":"Contributing"},{"location":"#how-it-works","text":"Django Framework Structure Layout","title":"How It Works"},{"location":"#issues-with-the-digital-portfolio","text":"Issues with the Digital Portfolio","title":"Issues with the Digital Portfolio"},{"location":"#terms-and-conditions","text":"Art Assets Licensing","title":"Terms and Conditions"},{"location":"#about","text":"About Project Deltaline Art Assets","title":"About"},{"location":"About%20Project%20Deltaline/","text":"About Deltaline Deltaline is basically the name for my digital portfolio, which is needed in school. I have written this docs out to lay the basic framework that the digital portfolio contains Issues with the Digital Portfolio The digital portfolio (Deltaline) is hosted on Google Sites. Now, it's meant as a static webpage, but when you add tons of hd assets, and tons of iframes and html code; it starts to lag. This is due to Google's Sites inefficient loading speeds and useless JS code. And the litmiations that google sites has doesn't allow me to use the Bootstrap lib, or use .svg or .webp files for faster load times. For more detail, please look at Issues with the Digital Portfolio page here","title":"About Project Deltaline"},{"location":"About%20Project%20Deltaline/#about-deltaline","text":"Deltaline is basically the name for my digital portfolio, which is needed in school. I have written this docs out to lay the basic framework that the digital portfolio contains","title":"About  Deltaline"},{"location":"About%20Project%20Deltaline/#issues-with-the-digital-portfolio","text":"The digital portfolio (Deltaline) is hosted on Google Sites. Now, it's meant as a static webpage, but when you add tons of hd assets, and tons of iframes and html code; it starts to lag. This is due to Google's Sites inefficient loading speeds and useless JS code. And the litmiations that google sites has doesn't allow me to use the Bootstrap lib, or use .svg or .webp files for faster load times. For more detail, please look at Issues with the Digital Portfolio page here","title":"Issues with the Digital Portfolio"},{"location":"Art%20Assets/","text":"Art Assets This page provides the terms and conditions under which you may use the logo and any other art assets provided in this project. By using it, you are agreeing that you will follow the guidelines set here. You may: If used, you have to state the changes, and give proper credit to whoever designed the logo (No767 designed the logo) You may not: Change or alter any of the colors used in the logo Change the sizes of the logos Share, and create modified versions of the logo or derivative works of it Use this for your own projects Claim the logo as your own work Sell the logo on its own or with other projects or as part of other projects without explcit permissions Commercially use this logo in any way, shape or form Use this for educational purposes Logo The logo is licensed under the CC-BY-NC-ND 4.0 Public License, and may be found here","title":"Art Assets"},{"location":"Art%20Assets/#art-assets","text":"This page provides the terms and conditions under which you may use the logo and any other art assets provided in this project. By using it, you are agreeing that you will follow the guidelines set here. You may: If used, you have to state the changes, and give proper credit to whoever designed the logo (No767 designed the logo) You may not: Change or alter any of the colors used in the logo Change the sizes of the logos Share, and create modified versions of the logo or derivative works of it Use this for your own projects Claim the logo as your own work Sell the logo on its own or with other projects or as part of other projects without explcit permissions Commercially use this logo in any way, shape or form Use this for educational purposes","title":"Art Assets"},{"location":"Art%20Assets/#logo","text":"The logo is licensed under the CC-BY-NC-ND 4.0 Public License, and may be found here","title":"Logo"},{"location":"Contributing%20to%20Deltaline/","text":"Contributing to Deltaline Deltaline is completely open source, licensed under the GPL-3.0 License. Currently, it's written in HTML, but I plan to rewrite it in Python/Django later on. The Logo is licensed under the CC-BY-ND-NC 4.0 License, and can be found here . All other works within Deltaline are all rights reserved. So, how do you contribute? Check out the contributing guidelines on the deltaline repo Dependencies This repo will start using the Django Framework to make things... faster and more smoother to say the least. The requirements are listed below: Python 3.6 and above (Devloped in Python 3.9.6) Django 3.2.5 LTS (should be already listed within the requirements.txt as a lib) Pip (comes bundled with Python 3) Yarn or npm Bootstrap Material Icons ( optional ) An IDE like VS Code or PyCharm. This will make things a lot easier to work with. Getting Started Front End (HTML + CSS) You will need to know how to code in HTML + CSS, since the website is coded that way. Also make sure that you know how to use the Bootstrap Lib as well. If not, read the docs for Bootstrap. The first thing you would want to do is to clone this repo. This can be done with git clone https://github.com/No767/Deltaline.git . The main folder that contain the files which will be deployed (with Netilfy) is the /site directory. The /dockersite is meant for the docker version of this site. If you want to use docker instead, you can find the docker image on the Docker Registry or on the GitHub Registry . Use the GitHub Registry if you want it to be more up to date, since each commit will also get sent through a Docker CI in order to build + deploy it. Most of the dependcies are already installed using CDNs within the files themselves, but if you want, make sure that you have Yarn installed and run yarn install on the root directory. This will installed all of the libs as needed. Make the changes that you see fit (remember, the actual works are all rights reserved), and make a pr to the master branch. Once it is reviwed, it's probably going to get merged and the CI servers will start kicking in. Back End (Python/Django) The Django Framework was made in Python 3.9.6, but use versions 3.6 or higher. Make sure you also have pip installed, and Django as well. The older versions like 2.7 don't get support. Within the root directory, you will noticed that there is a folder named \"Django\". That's the Django root directory. If you want to start up the sever, cd to that folder and run python manage.py runserver . This is meant mostly for local testing. Now, as with any Django project, the settings are tucked away within the Deltaline folder, and the views and models are within the src folder. As of right now, I've still trying to figure out how to get it working. As of now, use SQLite3 for the db storage, but you can use MySQL or PostgreSQL if you would like.","title":"Contributing to Deltaline"},{"location":"Contributing%20to%20Deltaline/#contributing-to-deltaline","text":"Deltaline is completely open source, licensed under the GPL-3.0 License. Currently, it's written in HTML, but I plan to rewrite it in Python/Django later on. The Logo is licensed under the CC-BY-ND-NC 4.0 License, and can be found here . All other works within Deltaline are all rights reserved. So, how do you contribute? Check out the contributing guidelines on the deltaline repo","title":"Contributing to Deltaline"},{"location":"Contributing%20to%20Deltaline/#dependencies","text":"This repo will start using the Django Framework to make things... faster and more smoother to say the least. The requirements are listed below: Python 3.6 and above (Devloped in Python 3.9.6) Django 3.2.5 LTS (should be already listed within the requirements.txt as a lib) Pip (comes bundled with Python 3) Yarn or npm Bootstrap Material Icons ( optional ) An IDE like VS Code or PyCharm. This will make things a lot easier to work with.","title":"Dependencies"},{"location":"Contributing%20to%20Deltaline/#getting-started","text":"","title":"Getting Started"},{"location":"Contributing%20to%20Deltaline/#front-end-html-css","text":"You will need to know how to code in HTML + CSS, since the website is coded that way. Also make sure that you know how to use the Bootstrap Lib as well. If not, read the docs for Bootstrap. The first thing you would want to do is to clone this repo. This can be done with git clone https://github.com/No767/Deltaline.git . The main folder that contain the files which will be deployed (with Netilfy) is the /site directory. The /dockersite is meant for the docker version of this site. If you want to use docker instead, you can find the docker image on the Docker Registry or on the GitHub Registry . Use the GitHub Registry if you want it to be more up to date, since each commit will also get sent through a Docker CI in order to build + deploy it. Most of the dependcies are already installed using CDNs within the files themselves, but if you want, make sure that you have Yarn installed and run yarn install on the root directory. This will installed all of the libs as needed. Make the changes that you see fit (remember, the actual works are all rights reserved), and make a pr to the master branch. Once it is reviwed, it's probably going to get merged and the CI servers will start kicking in.","title":"Front End (HTML + CSS)"},{"location":"Contributing%20to%20Deltaline/#back-end-pythondjango","text":"The Django Framework was made in Python 3.9.6, but use versions 3.6 or higher. Make sure you also have pip installed, and Django as well. The older versions like 2.7 don't get support. Within the root directory, you will noticed that there is a folder named \"Django\". That's the Django root directory. If you want to start up the sever, cd to that folder and run python manage.py runserver . This is meant mostly for local testing. Now, as with any Django project, the settings are tucked away within the Deltaline folder, and the views and models are within the src folder. As of right now, I've still trying to figure out how to get it working. As of now, use SQLite3 for the db storage, but you can use MySQL or PostgreSQL if you would like.","title":"Back End (Python/Django)"},{"location":"Contributing%20to%20the%20docs/","text":"Contributing to the Docs You can contribute to the docs if you want to, but mostly the digital portfolio itself will be kept private for privacy reasons. Just make sure to: Make a clone of this repo Start this up on MkDocs Load in all requirements and dependencies (check requirements.txt) Getting Started Dependencies: Python 3 (3.6 and above), Mkdocs, and Pip Dependcies List: mkdocs==1.1.2 sphinx-rtd-theme==0.5.2 myst-parser==0.14.0 mkdocs-material==7.1.5 mkdocs-material-extensions==1.0.1 mkdocs-rtd-dropdown==1.0.2 mkdocs-git-revision-date-localized-plugin==0.9.2 First install mkdocs by running pip install mkdocs cd to the folder that you want it to have the docs in and run git clone https://github.com/No767/Project-Deltaline-Docs.git run pip install -r requirements.txt in order to install the dependency within the reequirements.txt file Edit the files as needed and if you want to check how it looks, run mkdocs serve Once it's all done, deploy it to GitHub Pages by using mkdocs gh-deploy","title":"Contributing to the Docs"},{"location":"Contributing%20to%20the%20docs/#contributing-to-the-docs","text":"You can contribute to the docs if you want to, but mostly the digital portfolio itself will be kept private for privacy reasons. Just make sure to: Make a clone of this repo Start this up on MkDocs Load in all requirements and dependencies (check requirements.txt)","title":"Contributing to the Docs"},{"location":"Contributing%20to%20the%20docs/#getting-started","text":"Dependencies: Python 3 (3.6 and above), Mkdocs, and Pip Dependcies List: mkdocs==1.1.2 sphinx-rtd-theme==0.5.2 myst-parser==0.14.0 mkdocs-material==7.1.5 mkdocs-material-extensions==1.0.1 mkdocs-rtd-dropdown==1.0.2 mkdocs-git-revision-date-localized-plugin==0.9.2 First install mkdocs by running pip install mkdocs cd to the folder that you want it to have the docs in and run git clone https://github.com/No767/Project-Deltaline-Docs.git run pip install -r requirements.txt in order to install the dependency within the reequirements.txt file Edit the files as needed and if you want to check how it looks, run mkdocs serve Once it's all done, deploy it to GitHub Pages by using mkdocs gh-deploy","title":"Getting Started"},{"location":"Django%20Framework/","text":"Django Framework Deltaline uses Django in order to make thing go a lot faster, and add in features that something like JS or React would have. Django is a lib written in Python designed to accelerate loading speeds, and be secure and scalable. This allows me or any other contributer to add in features like a comment section, animations, and a ton more. I have been learning Python, since this language can be used from Discord Bots (making one rn, which is the Rin bot), machine learning and AI, to webapps like these.","title":"Django Framework"},{"location":"Django%20Framework/#django-framework","text":"Deltaline uses Django in order to make thing go a lot faster, and add in features that something like JS or React would have. Django is a lib written in Python designed to accelerate loading speeds, and be secure and scalable. This allows me or any other contributer to add in features like a comment section, animations, and a ton more. I have been learning Python, since this language can be used from Discord Bots (making one rn, which is the Rin bot), machine learning and AI, to webapps like these.","title":"Django Framework"},{"location":"Issues%20With%20the%20Digital%20Portfolio/","text":"Issues with the Digital Portfolio The whole reason why I decided to recode Deltaline in HTML was mainly because I already knew how to do code in HTML, and in Python. Soon I will be moving it to Vue.js and/or Django (to hopefully to use python as well). The Google Sites version has some major issues, and mostly regarding load times. Loading Times Lighthouse Test on the Google Sites version (the home page) Lighthouse Test on the self-made (hosted on Netifly) version (home page) As you can see, there is a massive improvement when it comes in loading times with the self-coded version. This was done on my laptop running the latest version of chrome and running Windows 10 Pro as well. All the conditions were the same when testing (the same chrome extensions, etc) This was one of the biggest reasons why I decided to make the website myself. Without Google's slow font api, and with full control over how I add images and other content, this allows for a lag-free experience. I'll try my best to reduce as much lag as possible. How the Website Looks Google Sites is very basic in design; it was meant to be easily deployed without having to touch any of the HTML, CSS, PHP, JS, or .Net code and framework. And since it's very basic in design, it doesn't allow for much control and how the website is built. Essentially, it's just the worse version of wordpress. So I decided to just rewrite the whole entire thing from the start. The Problem with Deltaline The point is to have a fully optimizted site, where things load in much quicker. It's actually done it's job, but the one big issue is regarding the load times of the SeeSaw iFrames. This is what's causing the lag. SeeSaw doesn't have any API's or REST APIs that I can intergrate into, but maybe python's asyncio (or known as async await) might be able to help Optimizations Google Sites only accepts .png, .jpg, and .gif image files. Nothing else. This isn't good for a website where it needs to load in HD assets, and takes a toll on Google Sites. With Netifly, it allows for compression and combined with Cloudflare, it allows for a very fast loading experience. In order to optimize the website, I used only svg files in order to reduce loading times, and mainly used the Bootstrap lib for mobile support. Since Seesaw doesn't have an api, I'm stuck with using iFrames in order to get it to work (or embed videos). The PageSpeed score isn't that good, but it seems like it loads a lot faster compared to the google site version. This site heavily depends on caching and minifying HTML files in order to load faster Timings: Google Sites Version - ~ 30 secs Deltaline - ~ 8 secs The times are the ones that load the first seesaw iframe. Possible Optimizations Text compression Python / Django web app instead of HTML + CSS Redis Cache Send everything to a MySQL database for search and other stuff (or NoSQL instead...) Change all CSS files to SCSS if self hosting, switch to using Nginx or Apache instead use NoSQL instead (MongoDB, Firebase, etc) Possible Addtions Search Function (MySQL + Apache Lucene) Plans Start rewriting the whole digital portfolio to use Django 3.2.5 and grab all libs for it","title":"Issues with the Digital Portfolio"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#issues-with-the-digital-portfolio","text":"The whole reason why I decided to recode Deltaline in HTML was mainly because I already knew how to do code in HTML, and in Python. Soon I will be moving it to Vue.js and/or Django (to hopefully to use python as well). The Google Sites version has some major issues, and mostly regarding load times.","title":"Issues with the Digital Portfolio"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#loading-times","text":"Lighthouse Test on the Google Sites version (the home page) Lighthouse Test on the self-made (hosted on Netifly) version (home page) As you can see, there is a massive improvement when it comes in loading times with the self-coded version. This was done on my laptop running the latest version of chrome and running Windows 10 Pro as well. All the conditions were the same when testing (the same chrome extensions, etc) This was one of the biggest reasons why I decided to make the website myself. Without Google's slow font api, and with full control over how I add images and other content, this allows for a lag-free experience. I'll try my best to reduce as much lag as possible.","title":"Loading Times"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#how-the-website-looks","text":"Google Sites is very basic in design; it was meant to be easily deployed without having to touch any of the HTML, CSS, PHP, JS, or .Net code and framework. And since it's very basic in design, it doesn't allow for much control and how the website is built. Essentially, it's just the worse version of wordpress. So I decided to just rewrite the whole entire thing from the start.","title":"How the Website Looks"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#the-problem-with-deltaline","text":"The point is to have a fully optimizted site, where things load in much quicker. It's actually done it's job, but the one big issue is regarding the load times of the SeeSaw iFrames. This is what's causing the lag. SeeSaw doesn't have any API's or REST APIs that I can intergrate into, but maybe python's asyncio (or known as async await) might be able to help","title":"The Problem with Deltaline"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#optimizations","text":"Google Sites only accepts .png, .jpg, and .gif image files. Nothing else. This isn't good for a website where it needs to load in HD assets, and takes a toll on Google Sites. With Netifly, it allows for compression and combined with Cloudflare, it allows for a very fast loading experience. In order to optimize the website, I used only svg files in order to reduce loading times, and mainly used the Bootstrap lib for mobile support. Since Seesaw doesn't have an api, I'm stuck with using iFrames in order to get it to work (or embed videos). The PageSpeed score isn't that good, but it seems like it loads a lot faster compared to the google site version. This site heavily depends on caching and minifying HTML files in order to load faster Timings: Google Sites Version - ~ 30 secs Deltaline - ~ 8 secs The times are the ones that load the first seesaw iframe.","title":"Optimizations"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#possible-optimizations","text":"Text compression Python / Django web app instead of HTML + CSS Redis Cache Send everything to a MySQL database for search and other stuff (or NoSQL instead...) Change all CSS files to SCSS if self hosting, switch to using Nginx or Apache instead use NoSQL instead (MongoDB, Firebase, etc)","title":"Possible Optimizations"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#possible-addtions","text":"Search Function (MySQL + Apache Lucene)","title":"Possible Addtions"},{"location":"Issues%20With%20the%20Digital%20Portfolio/#plans","text":"Start rewriting the whole digital portfolio to use Django 3.2.5 and grab all libs for it","title":"Plans"},{"location":"Licensing/","text":"Licensing As you may have read from the readme on the Deltaline repo, it might seem a little bit confusing on what the licensing terms are. So as a reminder, the deltaline repo is licensed under the GPL-3.0 license, this docs is licenesd under the CC-BY-SA 4.0 license, logo is licensed under the CC-BY-NC-ND 4.0 license, and all other works are all rights reserved. Basically what this means is this: Deltaline (the framework, not the content): GPL-3.0 Docs: CC-BY-SA 4.0 Logo: CC-BY-NC-ND 4.0 The actual schoolwork and any other works related with the schoolwork of this project: All rights reserved","title":"Licensing"},{"location":"Licensing/#licensing","text":"As you may have read from the readme on the Deltaline repo, it might seem a little bit confusing on what the licensing terms are. So as a reminder, the deltaline repo is licensed under the GPL-3.0 license, this docs is licenesd under the CC-BY-SA 4.0 license, logo is licensed under the CC-BY-NC-ND 4.0 license, and all other works are all rights reserved. Basically what this means is this: Deltaline (the framework, not the content): GPL-3.0 Docs: CC-BY-SA 4.0 Logo: CC-BY-NC-ND 4.0 The actual schoolwork and any other works related with the schoolwork of this project: All rights reserved","title":"Licensing"},{"location":"Plans%20for%20Deltaline/","text":"Plans for Deltaline As I'm building the backend Django framework, I have noticed that Netlify (current hosting company) doesn't support Django Frameworks and only static sites (basically ones made from HTML + CSS, and JS, React, Vue.js, etc). So, the next plan is to self host this on Docker. Below this is a list of things that need to be planned out in order to host this and run it properly. Switch from Netlify to Docker + Nginx based system Use CI/CD system (the Jenkins CI that was already in place for another project) to deploy and automatically update the servers as needed Nginx Web server with MySQL support Possibly use Nginx as a reverse proxy? Other Plans Deltaline isn't just a side project for me, it's more or less a way to optimize things and to bring a fast and smooth experience. There are more plans later on that I have. Rewrite backend to use Django 3.2.5 LTS instead Complete rewrite to use the Django backend framework","title":"Plans for Deltaline"},{"location":"Plans%20for%20Deltaline/#plans-for-deltaline","text":"As I'm building the backend Django framework, I have noticed that Netlify (current hosting company) doesn't support Django Frameworks and only static sites (basically ones made from HTML + CSS, and JS, React, Vue.js, etc). So, the next plan is to self host this on Docker. Below this is a list of things that need to be planned out in order to host this and run it properly. Switch from Netlify to Docker + Nginx based system Use CI/CD system (the Jenkins CI that was already in place for another project) to deploy and automatically update the servers as needed Nginx Web server with MySQL support Possibly use Nginx as a reverse proxy?","title":"Plans for Deltaline"},{"location":"Plans%20for%20Deltaline/#other-plans","text":"Deltaline isn't just a side project for me, it's more or less a way to optimize things and to bring a fast and smooth experience. There are more plans later on that I have. Rewrite backend to use Django 3.2.5 LTS instead Complete rewrite to use the Django backend framework","title":"Other Plans"},{"location":"Structure%20Layout/","text":"Structure Layout This site is layed out in a way so it spilts into multiple pages (or html files). This way, it doesn't overload netifly with a bunch of pages and keeps it mostly lag-free. iframes will still have to used since both Seesaw and Adobe Spark don't have API's that i can use Python (or js, but i haven't learned js yet) to hook into. But hopefully it shouldn't be a ton of lag if built correctly. If you want to suggest something to change, just make a pr and if u want to change the actual content itself, contact me first This is meant to show some of the better works out of the bunch. Only 5-7 will be selected out of the 20. Also there is a docker image for the index.html, which runs off of Nginx and Docker","title":"Structure Layout"},{"location":"Structure%20Layout/#structure-layout","text":"This site is layed out in a way so it spilts into multiple pages (or html files). This way, it doesn't overload netifly with a bunch of pages and keeps it mostly lag-free. iframes will still have to used since both Seesaw and Adobe Spark don't have API's that i can use Python (or js, but i haven't learned js yet) to hook into. But hopefully it shouldn't be a ton of lag if built correctly. If you want to suggest something to change, just make a pr and if u want to change the actual content itself, contact me first This is meant to show some of the better works out of the bunch. Only 5-7 will be selected out of the 20. Also there is a docker image for the index.html, which runs off of Nginx and Docker","title":"Structure Layout"}]}